<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   default-lazy-init="true" default-autowire="byName"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	

	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.yeren" />
	<mvc:annotation-driven />
	<mvc:resources mapping="/static/**" location="/static/"/>

	<!--配置数据转换器-->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>application/json;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    
    <!-- 定义一个视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/" p:suffix=".jsp" />

	<!--配置数据源-->
	<!-- <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:url="jdbc:mysql://10.25.83.47:3306/yeren_cms" p:driverClassName="com.mysql.jdbc.Driver"
		p:username="root" p:password="Root1234@" /> -->
		
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:url="jdbc:mysql://localhost:3306/yeren_cms" p:driverClassName="com.mysql.jdbc.Driver"
		p:username="root" p:password="root123" />

	<!--配置session工厂-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource" p:packagesToScan="com.yeren"
		p:hibernateProperties="/hibernate.properties" />

	<!--配置事物管理器-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />



	<!-- redis config start -->

	<cache:annotation-driven cache-manager="redisCacheManager" />
	<!--<cache:annotation-driven key-generator="userKeyGenerator"/>-->
	<cache:advice id="cacheAdvice" cache-manager="redisCacheManager" > </cache:advice>

	<!--redis配置文件-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!--自定义key生成策略-->
	<!--<bean id="userKeyGenerator" class="com.yeren.cms.util.CacheKeyGenerator"/>-->

	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		  p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.password}"
		  p:database="${redis.dbIndex}"
		  p:pool-config-ref="poolConfig" p:usePool="true"/>

	<!--初始化redis 操作类-->
	<bean id="redisCacheWriter" class="org.springframework.data.redis.cache.DefaultRedisCacheWriter">
		<constructor-arg name="connectionFactory" ref="jedisConnectionFactory"/>
	</bean>

	<!--默认的cache配置-->
	<bean id="defaultRedisCacheConfiguration" class="org.springframework.data.redis.cache.RedisCacheConfiguration"
		  factory-method="defaultCacheConfig"/>

	<!-- 配置RedisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="cacheWriter" ref="redisCacheWriter" />
		<constructor-arg name="defaultCacheConfiguration" ref="defaultRedisCacheConfiguration"/>
	</bean>

	<!-- redis config end -->
</beans>